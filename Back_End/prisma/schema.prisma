// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  password        String
  name            String?
  role            UserRole       @default(USER)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  refreshTokens   RefreshToken[]
  scanSessions    ScanSession[]
  authEmailOtp    String?
  isEmailVerified Boolean        @default(false)
  businessId      String         @unique
  business        Business       @relation(fields: [businessId], references: [id])
}

model Business {
  id          String   @id @default(uuid())
  name        String
  phone       String
  description String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ScanSession {
  id                 Int      @id @default(autoincrement())
  url                String
  ipAddress          String?
  startedAt          DateTime @default(now())
  webServer          String?
  technologies       Json?
  authenticationMethod String?
  spiderId           String?
  activeId           String?
  spiderStatus       Int      @default(0)
  activeStatus       Int      @default(0)
  spiderResults      Json?
  activeResults      Json?
  translatedResults  Json?
  swahiliResults     Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum ScanStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum UserRole {
  USER
  ADMIN
} 